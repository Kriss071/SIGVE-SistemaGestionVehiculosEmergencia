import logging
from ..client.supabase_client import get_supabase
from supabase import AuthApiError

# Inicializa el logger para este m√≥dulo.
logger = logging.getLogger(__name__)

class AuthService:
    """
    Servicio para gestionar la autenticaci√≥n de usuarios con Supabase.

    Encapsula la l√≥gica para iniciar y cerrar sesi√≥n, manejando la comunicaci√≥n
    con el cliente de Supabase y la gesti√≥n de posibles errores.
    """
    @staticmethod
    def login(email: str, password: str):
        """
        Autentica a un usuario utilizando email y contrase√±a.

        Args:
            email (str): Correo electr√≥nico del usuario.
            password (str): Contrase√±a del usuario.

        Returns:
            tuple: Una tupla conteniendo la sesi√≥n del usuario si fue exitosa (o None)
                   y un mensaje de error si ocurri√≥ alguno (o None).
        """
        
        logger.info(f"üîë (login) Intentando iniciar sesi√≥n para el usuario: {email}")
        supabase = get_supabase()
        
        try:           
            # Llama a la API de Supabase para iniciar sesi√≥n con email y contrase√±a.
            res = supabase.auth.sign_in_with_password({
                "email": email,
                "password": password,
            })

            # Validar que la respuesta contiene una sesi√≥n y un token de acceso
            if not getattr(res, "session", None) or not getattr(res.session, "access_token", None):
                logger.warning(f"üö´ (login) Credenciales inv√°lidas para el usuario: {email}")
                return None, "Credenciales inv√°lidas."
            
            logger.info(f"‚úÖ (login) Inicio de sesi√≥n exitoso para: {email}")
            return res.session, None
        except AuthApiError as e:
            # Captura errores espec√≠ficos de la API de autenticaci√≥n para dar feedback m√°s claro.
            logger.error(f"‚ùå (login) Error de AuthApiError para {email}: {e}", exc_info=True)
            return None, f"Error al iniciar sesi√≥n: {str(e)}"

        except Exception as e:
            # Captura cualquier otro error inesperado durante el proceso.
            logger.error(f"‚ùå (login) Error inesperado para {email}: {e}", exc_info=True)
            return None, "Ocurri√≥ un error inesperado."
        
    @staticmethod
    def logout():
        """
        Cierra la sesi√≥n del usuario actual en Supabase.

        Returns:
            str | None: Un mensaje de error si la operaci√≥n falla, de lo contrario None.
        """

        logger.info("üö™ (logout) Intentando cerrar sesi√≥n en Supabase.")
        try:
            # Llama al m√©todo de Supabase para invalidar la sesi√≥n actual.
            get_supabase().auth.sign_out()
            logger.info("‚úÖ (logout) Sesi√≥n cerrada exitosamente en Supabase.")
            return None
        except Exception as e:
            logger.error(f"‚ùå (logout) Error al cerrar sesi√≥n en Supabase: {e}", exc_info=True)
            return f"Error al cerrar sesi√≥n en Supabase: {e}"