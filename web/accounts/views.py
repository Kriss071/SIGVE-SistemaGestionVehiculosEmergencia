import logging
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import LoginForm
from .client.supabase_client import get_supabase
from .decorators import require_supabase_login
from .services.auth_service import AuthService
from .services.roles_services import RolesService

logger = logging.getLogger(__name__) 

def login_view(request):
    """
    Gestiona el proceso de inicio de sesi√≥n del usuario.

    - Si el usuario ya est√° autenticado (tiene token en sesi√≥n), redirige a 'vehicle_list'.
    - Si es m√©todo GET, muestra el formulario de login.
    - Si es m√©todo POST:
        - Valida el formulario.
        - Llama a AuthService.login para autenticar con Supabase.
        - Si la autenticaci√≥n es exitosa:
            - Limpia la sesi√≥n anterior.
            - Guarda los tokens, email, ID y rol del usuario en la sesi√≥n de Django.
            - Establece la sesi√≥n para que expire al cerrar el navegador.
            - Muestra un mensaje de √©xito y redirige a 'vehicle_list'.
        - Si la autenticaci√≥n falla o el formulario es inv√°lido, muestra errores.

    Args:
        request: El objeto HttpRequest de Django.

    Returns:
        HttpResponse: Renderiza el template de login o redirige a 'vehicle_list'.
    """

    # 1. Redirigir si ya est√° logueado
    if request.session.get("sb_access_token"):
        logger.debug("üë§ (login_view) Usuario ya autenticado, redirigiendo a 'vehicle_list'.")
        return redirect("vehicle_list")

    # 2. Procesar el env√≠o del formulario (POST)
    if request.method == "POST":
        form = LoginForm(request.POST)
        if form.is_valid():
            logger.debug("‚úÖ (login_view) Formulario de login v√°lido. Intentando autenticar...")
            email = form.cleaned_data["email"]
            password = form.cleaned_data["password"]

            # 2a. Llamar al servicio de autenticaci√≥n
            session, error = AuthService.login(email, password)
            
            # 2b. Manejar fallo de autenticaci√≥n
            if error or not session:
                logger.warning(f"üö´ (login_view) Fallo de autenticaci√≥n para {email}: {error}")
                messages.error(request, error or "Error desconocido al intentar iniciar sesi√≥n.")
                return render(request, "accounts/unauthorized.html", {"form": form})

            # 2c. Autenticaci√≥n exitosa: Configurar sesi√≥n de Django
            logger.info(f"üîë (login_view) Autenticaci√≥n exitosa para {email}.")
            request.session.flush() # Limpiar cualquier sesi√≥n anterior
            request.session["sb_access_token"] = session.access_token
            request.session["sb_refresh_token"] = session.refresh_token
            request.session["sb_user_email"] = form.cleaned_data["email"]
            request.session.set_expiry(0) # La sesi√≥n expira al cerrar el navegador

            # 2d. Obtener y guardar ID y Rol del usuario en la sesi√≥n
            user_id = session.user.id
            try:
                user_role = RolesService.get_user_role(user_id)
                logger.info(f"üé≠ (login_view) Rol obtenido para {user_id}: {user_role}")
                request.session["sb_user_id"] = user_id
                # Usar "Usuario" como default si no se encuentra rol espec√≠fico
                request.session["sb_user_role"] = user_role or "Usuario"
            except Exception as e:
                logger.error(f"‚ùå (login_view) Error obteniendo rol para {user_id} tras login: {e}", exc_info=True)
                messages.error(request, "Inicio de sesi√≥n exitoso, pero hubo un problema al cargar tus permisos.")
                # Aunque hubo error con el rol, el login fue exitoso, continuar pero sin rol espec√≠fico
                request.session["sb_user_id"] = user_id
                request.session["sb_user_role"] = "Usuario" # Rol gen√©rico en caso de error

            logger.debug(f"‚ÑπÔ∏è (login_view) Sesi√≥n configurada: ID={user_id}, Rol={request.session['sb_user_role']}")
            messages.success(request, "¬°Sesi√≥n iniciada correctamente!")
            return redirect("vehicle_list") # Redirigir a la lista de veh√≠culos
        else:
            # 2e. Formulario inv√°lido
            logger.warning("‚ö†Ô∏è (login_view) Formulario de login inv√°lido.")
            messages.error(request, "Datos inv√°lidos. Por favor, revisa el formulario.")

    # 3. Mostrar el formulario vac√≠o (GET o POST inv√°lido)
    else:
        form = LoginForm()
        logger.debug("üìÑ (login_view) Mostrando formulario de login (GET).")

    # Renderizar la plantilla de login con el formulario (vac√≠o o con errores)
    return render(request, "accounts/login.html", {"form": form})


def logout_view(request):
    """
    Gestiona el cierre de sesi√≥n del usuario.

    Llama a AuthService.logout() para invalidar la sesi√≥n en Supabase (si aplica),
    limpia la sesi√≥n de Django, muestra un mensaje informativo y redirige
    a la vista de login.

    Args:
        request: El objeto HttpRequest de Django.

    Returns:
        HttpResponseRedirect: Redirige siempre a la vista 'login'.
    """
    user_email = request.session.get("sb_user_email", "Usuario desconocido")
    logger.info(f"üö™ (logout_view) Cerrando sesi√≥n para {user_email}...")

    # 1. Intentar cerrar sesi√≥n en Supabase (AuthService maneja errores internos)
    AuthService.logout()
    # 2. Limpiar la sesi√≥n de Django
    request.session.flush()
    # 3. Mostrar mensaje y redirigir
    messages.info(request, "Sesi√≥n cerrada.")
    return redirect("login")


def unauthorized_view(request):
    """
    Muestra una p√°gina indicando que el usuario no tiene permisos.

    Renderiza el template 'accounts/unauthorized.html' con un estado HTTP 403 (Forbidden).

    Args:
        request: El objeto HttpRequest de Django.

    Returns:
        HttpResponse: La p√°gina de "no autorizado" renderizada.
    """
    logger.warning(f"üö´ (unauthorized_view) Acceso no autorizado solicitado por usuario {request.session.get('sb_user_id', 'desconocido')}.")
    return render(request, "accounts/unauthorized.html", status=403)
